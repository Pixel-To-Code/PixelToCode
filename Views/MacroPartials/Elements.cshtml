@inherits Umbraco.Web.Mvc.UmbracoViewPage<dynamic>
@using Simplismo
@{
    // loop through node children recursively and render according to type alias
    
    IPublishedContent mdl = Model.Content;
      
    string[] dontProcess = new string[] { "Page", "Folder", "Collection", "FlashTour" };

    IEnumerable<IPublishedContent> childNodes = mdl.Children.Where(x => !dontProcess.Contains(x.DocumentTypeAlias) && x.IsVisible());

    if (childNodes.Any())
    {
        <div class="row" >
            @foreach (var elem in childNodes)
            {                                
                // xs (phones), sm (tablets), md (desktops), and lg (larger desktops).
                
                string cols = Grid.Cols(Grid.Md, 12);
                
                //string clas = "";

                IPublishedContent theNode = elem;

                
                // number of columns 
                if (elem.HasProperty("columnsLargeScreen"))
                {
                    cols = Grid.Cols(Grid.Md, (int)elem.GetPropertyValue("columnsLargeScreen"));
                }
                
                
                // select content from elsewhere
                if (elem.HasProperty("selectedContent"))
                {
                    int cont = 0;
                    cont = int.Parse(elem.GetPropertyValue("selectedContent").ToString());
                    theNode = Umbraco.Content(cont);
                }

                bool useCollectionTemplate = false;
                if (elem.HasProperty("useCollectionTemplate"))
                {
                    bool ret = Boolean.TryParse(elem.GetPropertyValue("useCollectionTemplate").ToString(), out useCollectionTemplate);
                }

                //bool useItemTemplates = false;
                //if (elem.HasProperty("useItemTemplates"))
                //{
                //    bool ret = Boolean.TryParse(elem.GetPropertyValue("useItemTemplates").ToString(), out useItemTemplates);
                //}
                
                //if (theNode.HasProperty("style"))
                //{
                //    clas = theNode.GetPropertyValue("style").ToString();
                //}

                // pass in number of items to show (Latest news etc)
                ViewDataDictionary vdata = new ViewDataDictionary();
                if (elem.HasProperty("itemsToShow"))
                {
                    vdata.Add("itemsToShow", elem.GetPropertyValue("itemsToShow").ToString());
                }
                
                
                <div class="@cols @theNode.DocumentTypeAlias.ToLower() @("i" + theNode.Id)">

                 
                    @if (useCollectionTemplate && theNode.TemplateId > 0)
                    { 
                        @Umbraco.RenderTemplate(theNode.Id, theNode.TemplateId)
                    }
                    else
                    {
                        Html.RenderPartial(theNode.DocumentTypeAlias, theNode, vdata); 
                    }
                

                </div>
            }
        </div>
    }

}
